#!/usr/bin/env node

/**
 * Investigaci√≥n Espec√≠fica: Servicio a479e2d0-9121-4d0b-ac4b-1efd86c6aab6
 * Analiza por qu√© este servicio espec√≠fico devuelve 0 doctores
 * 
 * PROBLEMA: DEBUG: Loaded 0 doctors for service a479e2d0-9121-4d0b-ac4b-1efd86c6aab6
 * OBJETIVO: Identificar la causa ra√≠z espec√≠fica de este servicio
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Error: Variables de entorno de Supabase no configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Datos de investigaci√≥n
const INVESTIGATION_DATA = {
  organizationId: '927cecbe-d9e5-43a4-b9d0-25f942ededc4',
  problemServiceId: 'a479e2d0-9121-4d0b-ac4b-1efd86c6aab6', // Servicio que falla
  workingServiceId: '0c98efc9-b65c-4913-aa23-9952493d7d9d'  // Servicio que funciona (Examen Visual Completo)
};

/**
 * Paso 1: Identificar qu√© servicio es el problem√°tico
 */
async function identifyProblemService() {
  console.log('\nüîç PASO 1: Identificar Servicio Problem√°tico');
  console.log('============================================');

  try {
    // Buscar el servicio problem√°tico
    const { data: problemService, error: problemError } = await supabase
      .from('services')
      .select('*')
      .eq('id', INVESTIGATION_DATA.problemServiceId)
      .single();

    if (problemError) {
      console.error('‚ùå Error buscando servicio problem√°tico:', problemError);
      return null;
    }

    if (!problemService) {
      console.error('‚ùå PROBLEMA CR√çTICO: Servicio no existe en la base de datos');
      return null;
    }

    console.log('‚úÖ Servicio problem√°tico encontrado:');
    console.log(`   üìã ID: ${problemService.id}`);
    console.log(`   üìã Nombre: ${problemService.name}`);
    console.log(`   üìã Descripci√≥n: ${problemService.description}`);
    console.log(`   üìã Categor√≠a: ${problemService.category}`);
    console.log(`   üìã Duraci√≥n: ${problemService.duration_minutes} minutos`);
    console.log(`   üìã Precio: $${problemService.price}`);
    console.log(`   üìã Activo: ${problemService.is_active}`);
    console.log(`   üìã Organizaci√≥n: ${problemService.organization_id}`);

    return problemService;

  } catch (error) {
    console.error('‚ùå Error en identificaci√≥n de servicio:', error);
    return null;
  }
}

/**
 * Paso 2: Comparar con el servicio que funciona
 */
async function compareWithWorkingService() {
  console.log('\nüîç PASO 2: Comparar con Servicio que Funciona');
  console.log('=============================================');

  try {
    // Buscar el servicio que funciona
    const { data: workingService, error: workingError } = await supabase
      .from('services')
      .select('*')
      .eq('id', INVESTIGATION_DATA.workingServiceId)
      .single();

    if (workingError) {
      console.error('‚ùå Error buscando servicio que funciona:', workingError);
      return null;
    }

    console.log('‚úÖ Servicio que funciona:');
    console.log(`   üìã ID: ${workingService.id}`);
    console.log(`   üìã Nombre: ${workingService.name}`);
    console.log(`   üìã Descripci√≥n: ${workingService.description}`);
    console.log(`   üìã Categor√≠a: ${workingService.category}`);
    console.log(`   üìã Duraci√≥n: ${workingService.duration_minutes} minutos`);
    console.log(`   üìã Precio: $${workingService.price}`);
    console.log(`   üìã Activo: ${workingService.is_active}`);
    console.log(`   üìã Organizaci√≥n: ${workingService.organization_id}`);

    return workingService;

  } catch (error) {
    console.error('‚ùå Error en comparaci√≥n de servicios:', error);
    return null;
  }
}

/**
 * Paso 3: Verificar asociaciones doctor-servicio
 */
async function checkDoctorServiceAssociations() {
  console.log('\nüîç PASO 3: Verificar Asociaciones Doctor-Servicio');
  console.log('=================================================');

  try {
    // Verificar asociaciones para el servicio problem√°tico
    console.log('üìã Verificando servicio problem√°tico...');
    const { data: problemAssociations, error: problemError } = await supabase
      .from('doctor_services')
      .select(`
        doctor_id,
        service_id,
        services(name),
        profiles(first_name, last_name)
      `)
      .eq('service_id', INVESTIGATION_DATA.problemServiceId);

    if (problemError) {
      console.error('‚ùå Error verificando asociaciones problem√°ticas:', problemError);
    } else {
      console.log(`   üìä Asociaciones encontradas: ${problemAssociations?.length || 0}`);
      if (problemAssociations && problemAssociations.length > 0) {
        problemAssociations.forEach(assoc => {
          console.log(`   üë®‚Äç‚öïÔ∏è Doctor: ${assoc.profiles?.first_name} ${assoc.profiles?.last_name}`);
        });
      } else {
        console.log('   ‚ùå NO HAY DOCTORES ASOCIADOS A ESTE SERVICIO');
      }
    }

    // Verificar asociaciones para el servicio que funciona
    console.log('\nüìã Verificando servicio que funciona...');
    const { data: workingAssociations, error: workingError } = await supabase
      .from('doctor_services')
      .select(`
        doctor_id,
        service_id,
        services(name),
        profiles(first_name, last_name)
      `)
      .eq('service_id', INVESTIGATION_DATA.workingServiceId);

    if (workingError) {
      console.error('‚ùå Error verificando asociaciones que funcionan:', workingError);
    } else {
      console.log(`   üìä Asociaciones encontradas: ${workingAssociations?.length || 0}`);
      if (workingAssociations && workingAssociations.length > 0) {
        workingAssociations.forEach(assoc => {
          console.log(`   üë®‚Äç‚öïÔ∏è Doctor: ${assoc.profiles?.first_name} ${assoc.profiles?.last_name}`);
        });
      }
    }

    return {
      problemAssociations: problemAssociations || [],
      workingAssociations: workingAssociations || []
    };

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n de asociaciones:', error);
    return null;
  }
}

/**
 * Paso 4: Simular la API call exacta que est√° fallando
 */
async function simulateFailingAPICall() {
  console.log('\nüîç PASO 4: Simular API Call que Falla');
  console.log('====================================');

  try {
    console.log('üìã Simulando API /api/doctors con servicio problem√°tico...');
    
    // Paso 1: Obtener doctor profile IDs (como hace la API)
    const { data: doctorServices, error: serviceError } = await supabase
      .from('doctor_services')
      .select('doctor_id')
      .eq('service_id', INVESTIGATION_DATA.problemServiceId);

    if (serviceError) {
      console.error('‚ùå Error obteniendo doctor_services:', serviceError);
      return null;
    }

    const doctorProfileIds = doctorServices?.map(ds => ds.doctor_id) || [];
    console.log(`   üìä Doctor profile IDs encontrados: ${doctorProfileIds.length}`);
    console.log(`   üìã IDs: ${JSON.stringify(doctorProfileIds)}`);

    if (doctorProfileIds.length === 0) {
      console.log('   ‚ùå CAUSA RA√çZ ENCONTRADA: No hay doctores asociados a este servicio');
      return { success: true, data: [] };
    }

    // Paso 2: Obtener datos de doctores (como hace la API)
    const { data: filteredDoctors, error: doctorsError } = await supabase
      .from('doctors')
      .select(`
        id,
        specialization,
        consultation_fee,
        is_available,
        profiles(
          id,
          first_name,
          last_name,
          email
        )
      `)
      .eq('organization_id', INVESTIGATION_DATA.organizationId)
      .eq('is_available', true)
      .in('profile_id', doctorProfileIds);

    if (doctorsError) {
      console.error('‚ùå Error obteniendo doctores:', doctorsError);
      return null;
    }

    console.log(`   üìä Doctores encontrados: ${filteredDoctors?.length || 0}`);

    return {
      success: true,
      data: filteredDoctors || []
    };

  } catch (error) {
    console.error('‚ùå Error en simulaci√≥n de API:', error);
    return null;
  }
}

/**
 * Paso 5: Verificar todos los servicios disponibles
 */
async function checkAllServices() {
  console.log('\nüîç PASO 5: Verificar Todos los Servicios');
  console.log('========================================');

  try {
    // Obtener todos los servicios de la organizaci√≥n
    const { data: allServices, error: servicesError } = await supabase
      .from('services')
      .select('id, name, category, is_active')
      .eq('organization_id', INVESTIGATION_DATA.organizationId)
      .eq('is_active', true)
      .order('category', { ascending: true })
      .order('name', { ascending: true });

    if (servicesError) {
      console.error('‚ùå Error obteniendo servicios:', servicesError);
      return null;
    }

    console.log(`‚úÖ Servicios activos encontrados: ${allServices?.length || 0}`);

    // Para cada servicio, verificar si tiene doctores asociados
    for (const service of allServices || []) {
      const { data: associations, error: assocError } = await supabase
        .from('doctor_services')
        .select('doctor_id')
        .eq('service_id', service.id);

      const doctorCount = associations?.length || 0;
      const status = doctorCount > 0 ? '‚úÖ' : '‚ùå';
      const highlight = service.id === INVESTIGATION_DATA.problemServiceId ? ' ‚ö†Ô∏è  PROBLEM√ÅTICO' : '';
      
      console.log(`   ${status} ${service.name} (${service.category}) - ${doctorCount} doctores${highlight}`);
    }

    return allServices;

  } catch (error) {
    console.error('‚ùå Error verificando todos los servicios:', error);
    return null;
  }
}

/**
 * Funci√≥n principal de investigaci√≥n
 */
async function main() {
  console.log('üîç INVESTIGACI√ìN ESPEC√çFICA: Servicio a479e2d0-9121-4d0b-ac4b-1efd86c6aab6');
  console.log('===========================================================================');
  console.log('Problema: DEBUG: Loaded 0 doctors for service a479e2d0-9121-4d0b-ac4b-1efd86c6aab6');
  console.log('Objetivo: Identificar por qu√© este servicio espec√≠fico no tiene doctores');
  console.log('===========================================================================');

  const results = {
    serviceIdentified: false,
    comparisonDone: false,
    associationsChecked: false,
    apiSimulated: false,
    allServicesChecked: false
  };

  // Ejecutar investigaci√≥n paso a paso
  const problemService = await identifyProblemService();
  results.serviceIdentified = problemService !== null;

  const workingService = await compareWithWorkingService();
  results.comparisonDone = workingService !== null;

  const associations = await checkDoctorServiceAssociations();
  results.associationsChecked = associations !== null;

  const apiResult = await simulateFailingAPICall();
  results.apiSimulated = apiResult !== null;

  const allServices = await checkAllServices();
  results.allServicesChecked = allServices !== null;

  // An√°lisis final
  console.log('\nüìä AN√ÅLISIS FINAL');
  console.log('=================');

  if (problemService) {
    console.log(`‚úÖ Servicio identificado: "${problemService.name}"`);
  }

  if (associations) {
    const problemCount = associations.problemAssociations.length;
    const workingCount = associations.workingAssociations.length;
    
    console.log(`üìä Asociaciones doctor-servicio:`);
    console.log(`   - Servicio problem√°tico: ${problemCount} doctores`);
    console.log(`   - Servicio que funciona: ${workingCount} doctores`);

    if (problemCount === 0) {
      console.log('\nüéØ CAUSA RA√çZ IDENTIFICADA:');
      console.log('‚ùå El servicio NO TIENE DOCTORES ASOCIADOS en la tabla doctor_services');
      console.log('üí° SOLUCI√ìN: Agregar asociaciones doctor-servicio para este servicio');
    }
  }

  // Resumen final
  console.log('\nüìã RESUMEN DE INVESTIGACI√ìN');
  console.log('===========================');
  console.log(`Servicio Identificado: ${results.serviceIdentified ? '‚úÖ S√ç' : '‚ùå NO'}`);
  console.log(`Comparaci√≥n Realizada: ${results.comparisonDone ? '‚úÖ S√ç' : '‚ùå NO'}`);
  console.log(`Asociaciones Verificadas: ${results.associationsChecked ? '‚úÖ S√ç' : '‚ùå NO'}`);
  console.log(`API Simulada: ${results.apiSimulated ? '‚úÖ S√ç' : '‚ùå NO'}`);
  console.log(`Todos los Servicios Verificados: ${results.allServicesChecked ? '‚úÖ S√ç' : '‚ùå NO'}`);

  const allPassed = Object.values(results).every(result => result === true);
  
  if (allPassed) {
    console.log('\nüéâ ¬°INVESTIGACI√ìN COMPLETADA EXITOSAMENTE!');
    console.log('‚úÖ Causa ra√≠z identificada y documentada');
    process.exit(0);
  } else {
    console.log('\n‚ùå INVESTIGACI√ìN INCOMPLETA');
    console.log('‚ö†Ô∏è  Algunos pasos fallaron y requieren atenci√≥n');
    process.exit(1);
  }
}

// Ejecutar investigaci√≥n
if (require.main === module) {
  main().catch(error => {
    console.error('üí• Error fatal en investigaci√≥n:', error);
    process.exit(1);
  });
}

module.exports = {
  identifyProblemService,
  compareWithWorkingService,
  checkDoctorServiceAssociations,
  simulateFailingAPICall,
  checkAllServices
};
