#!/usr/bin/env node

/**
 * Script de Validaci√≥n: Correcci√≥n de Disponibilidad de Doctores
 * Valida que la correcci√≥n cr√≠tica del flujo de reserva manual funcione correctamente
 * 
 * PROBLEMA RESUELTO: "0 doctores disponibles" cuando existe disponibilidad real
 * CAUSA RA√çZ: API buscaba por profile_id en lugar de id en tabla doctors
 * SOLUCI√ìN: Corregir filtros y usar profile_id correctamente para doctor_availability
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Error: Variables de entorno de Supabase no configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Datos de prueba
const TEST_DATA = {
  organizationId: '927cecbe-d9e5-43a4-b9d0-25f942ededc4',
  serviceId: '0c98efc9-b65c-4913-aa23-9952493d7d9d', // Examen Visual Completo
  date: '2024-12-30',
  duration: 30,
  expectedDoctors: {
    'Ana Rodr√≠guez': {
      doctorId: '5bfbf7b8-e021-4657-ae42-a3fa185d4ab6',
      profileId: 'c923e0ec-d941-48d1-9fe6-0d75122e3cbe'
    },
    'Elena L√≥pez': {
      doctorId: 'e73dcd71-af31-44b8-b517-5a1c8b4e49be',
      profileId: 'd2afb7f5-c272-402d-8d86-ea7ea92d4380'
    }
  }
};

/**
 * Validaci√≥n 1: Integridad de Datos
 */
async function validateDataIntegrity() {
  console.log('\nüîç VALIDACI√ìN 1: Integridad de Datos');
  console.log('=====================================');

  try {
    // 1.1 Verificar que no hay registros hu√©rfanos en doctor_availability
    const { data: orphanedAvailability, error: orphanError } = await supabase
      .from('doctor_availability')
      .select('doctor_id')
      .not('doctor_id', 'in', `(${Object.values(TEST_DATA.expectedDoctors).map(d => `"${d.profileId}"`).join(',')})`);

    if (orphanError) {
      console.error('‚ùå Error verificando registros hu√©rfanos:', orphanError);
      return false;
    }

    if (orphanedAvailability && orphanedAvailability.length > 0) {
      console.error(`‚ùå Encontrados ${orphanedAvailability.length} registros hu√©rfanos en doctor_availability`);
      return false;
    }

    console.log('‚úÖ No hay registros hu√©rfanos en doctor_availability');

    // 1.2 Verificar que Ana Rodr√≠guez tiene servicios asociados
    const { data: anaServices, error: servicesError } = await supabase
      .from('doctor_services')
      .select('service_id, services(name)')
      .eq('doctor_id', TEST_DATA.expectedDoctors['Ana Rodr√≠guez'].profileId);

    if (servicesError) {
      console.error('‚ùå Error verificando servicios de Ana:', servicesError);
      return false;
    }

    if (!anaServices || anaServices.length === 0) {
      console.error('‚ùå Ana Rodr√≠guez no tiene servicios asociados');
      return false;
    }

    console.log(`‚úÖ Ana Rodr√≠guez tiene ${anaServices.length} servicios asociados`);

    // 1.3 Verificar que Ana Rodr√≠guez tiene disponibilidad
    const { data: anaAvailability, error: availError } = await supabase
      .from('doctor_availability')
      .select('id, day_of_week, start_time, end_time')
      .eq('doctor_id', TEST_DATA.expectedDoctors['Ana Rodr√≠guez'].profileId)
      .eq('is_active', true);

    if (availError) {
      console.error('‚ùå Error verificando disponibilidad de Ana:', availError);
      return false;
    }

    if (!anaAvailability || anaAvailability.length === 0) {
      console.error('‚ùå Ana Rodr√≠guez no tiene disponibilidad configurada');
      return false;
    }

    console.log(`‚úÖ Ana Rodr√≠guez tiene ${anaAvailability.length} horarios de disponibilidad`);

    return true;

  } catch (error) {
    console.error('‚ùå Error en validaci√≥n de integridad:', error);
    return false;
  }
}

/**
 * Validaci√≥n 2: Flujo de API Corregido
 */
async function validateAPIFlow() {
  console.log('\nüîç VALIDACI√ìN 2: Flujo de API Corregido');
  console.log('======================================');

  try {
    // 2.1 Simular el flujo corregido de la API
    console.log('üìã Paso 1: Obtener doctores que ofrecen el servicio...');
    
    const { data: doctorServices, error: serviceError } = await supabase
      .from('doctor_services')
      .select('doctor_id')
      .eq('service_id', TEST_DATA.serviceId);

    if (serviceError) {
      console.error('‚ùå Error obteniendo doctor_services:', serviceError);
      return false;
    }

    const doctorIds = doctorServices?.map(ds => ds.doctor_id) || [];
    console.log(`üìä Encontrados ${doctorIds.length} doctores para el servicio`);

    if (doctorIds.length === 0) {
      console.error('‚ùå PROBLEMA: No se encontraron doctores para el servicio');
      return false;
    }

    // 2.2 Obtener datos de doctores usando el filtro CORREGIDO
    console.log('üìã Paso 2: Obtener datos de doctores (filtro corregido)...');
    
    const { data: doctors, error: doctorsError } = await supabase
      .from('doctors')
      .select(`
        id,
        profile_id,
        specialization,
        consultation_fee,
        profiles(id, first_name, last_name, email)
      `)
      .eq('organization_id', TEST_DATA.organizationId)
      .eq('is_available', true)
      .in('id', doctorIds); // ‚úÖ CORREGIDO: era .in('profile_id', doctorIds)

    if (doctorsError) {
      console.error('‚ùå Error obteniendo doctores:', doctorsError);
      return false;
    }

    console.log(`üìä Encontrados ${doctors?.length || 0} doctores disponibles`);

    if (!doctors || doctors.length === 0) {
      console.error('‚ùå PROBLEMA: API devuelve 0 doctores disponibles');
      return false;
    }

    // 2.3 Verificar que Ana Rodr√≠guez est√° en los resultados
    const anaDoctor = doctors.find(d => 
      d.profiles.first_name === 'Ana' && d.profiles.last_name === 'Rodr√≠guez'
    );

    if (!anaDoctor) {
      console.error('‚ùå PROBLEMA: Ana Rodr√≠guez no aparece en los resultados');
      return false;
    }

    console.log('‚úÖ Ana Rodr√≠guez encontrada en los resultados');
    console.log(`   - Doctor ID: ${anaDoctor.id}`);
    console.log(`   - Profile ID: ${anaDoctor.profile_id}`);
    console.log(`   - Especializaci√≥n: ${anaDoctor.specialization}`);

    // 2.4 Obtener disponibilidad usando profile_id correcto
    console.log('üìã Paso 3: Obtener disponibilidad usando profile_id...');
    
    const profileIds = doctors.map(d => d.profile_id).filter(Boolean);
    const dayOfWeek = new Date(TEST_DATA.date).getDay();

    const { data: schedules, error: schedulesError } = await supabase
      .from('doctor_availability')
      .select('doctor_id, day_of_week, start_time, end_time, is_active')
      .in('doctor_id', profileIds)
      .eq('day_of_week', dayOfWeek)
      .eq('is_active', true);

    if (schedulesError) {
      console.error('‚ùå Error obteniendo horarios:', schedulesError);
      return false;
    }

    console.log(`üìä Encontrados ${schedules?.length || 0} horarios para el d√≠a ${dayOfWeek}`);

    if (!schedules || schedules.length === 0) {
      console.log('‚ö†Ô∏è  No hay horarios para el d√≠a seleccionado, probando con lunes (d√≠a 1)...');
      
      const { data: mondaySchedules, error: mondayError } = await supabase
        .from('doctor_availability')
        .select('doctor_id, day_of_week, start_time, end_time, is_active')
        .in('doctor_id', profileIds)
        .eq('day_of_week', 1) // Lunes
        .eq('is_active', true);

      if (mondayError) {
        console.error('‚ùå Error obteniendo horarios de lunes:', mondayError);
        return false;
      }

      if (!mondaySchedules || mondaySchedules.length === 0) {
        console.error('‚ùå PROBLEMA: No se encontraron horarios para ning√∫n d√≠a');
        return false;
      }

      console.log(`‚úÖ Encontrados ${mondaySchedules.length} horarios para lunes`);
    }

    console.log('‚úÖ Flujo de API completado exitosamente');
    return true;

  } catch (error) {
    console.error('‚ùå Error en validaci√≥n de API:', error);
    return false;
  }
}

/**
 * Validaci√≥n 3: Casos de Prueba Espec√≠ficos
 */
async function validateSpecificCases() {
  console.log('\nüîç VALIDACI√ìN 3: Casos de Prueba Espec√≠ficos');
  console.log('============================================');

  try {
    // 3.1 Caso: Servicio "Examen Visual Completo" debe devolver doctores
    console.log('üìã Caso 1: Servicio "Examen Visual Completo"...');
    
    const { data: examService, error: examError } = await supabase
      .from('services')
      .select('id, name')
      .eq('id', TEST_DATA.serviceId)
      .single();

    if (examError || !examService) {
      console.error('‚ùå Error: Servicio no encontrado');
      return false;
    }

    console.log(`‚úÖ Servicio encontrado: ${examService.name}`);

    // 3.2 Caso: Ana Rodr√≠guez debe aparecer para este servicio
    console.log('üìã Caso 2: Ana Rodr√≠guez debe estar disponible...');
    
    const { data: anaServiceCheck, error: anaServiceError } = await supabase
      .from('doctor_services')
      .select('doctor_id')
      .eq('service_id', TEST_DATA.serviceId)
      .eq('doctor_id', TEST_DATA.expectedDoctors['Ana Rodr√≠guez'].profileId);

    if (anaServiceError || !anaServiceCheck || anaServiceCheck.length === 0) {
      console.error('‚ùå PROBLEMA: Ana Rodr√≠guez no est√° asociada al servicio');
      return false;
    }

    console.log('‚úÖ Ana Rodr√≠guez est√° asociada al servicio');

    // 3.3 Caso: Verificar que el problema "0 doctores" est√° resuelto
    console.log('üìã Caso 3: Verificar resoluci√≥n de "0 doctores disponibles"...');
    
    const { data: serviceCheck, error: serviceCheckError } = await supabase
      .from('doctor_services')
      .select('doctor_id')
      .eq('service_id', TEST_DATA.serviceId);

    if (serviceCheckError) {
      console.error('‚ùå Error verificando asociaciones de servicio:', serviceCheckError);
      return false;
    }

    const serviceDoctorIds = serviceCheck?.map(ds => ds.doctor_id) || [];
    
    if (serviceDoctorIds.length === 0) {
      console.error('‚ùå PROBLEMA CR√çTICO: Servicio no tiene doctores asociados');
      return false;
    }

    console.log(`‚úÖ Servicio tiene ${serviceDoctorIds.length} doctores asociados`);
    console.log('‚úÖ Problema "0 doctores disponibles" RESUELTO');

    return true;

  } catch (error) {
    console.error('‚ùå Error en casos espec√≠ficos:', error);
    return false;
  }
}

/**
 * Funci√≥n principal de validaci√≥n
 */
async function main() {
  console.log('üè• VALIDACI√ìN DE CORRECCI√ìN: Flujo de Reserva Manual');
  console.log('===================================================');
  console.log('Problema: "0 doctores disponibles" cuando existe disponibilidad real');
  console.log('Soluci√≥n: Corregir filtros de API y mapeo de profile_id');
  console.log('===================================================');

  const results = {
    dataIntegrity: false,
    apiFlow: false,
    specificCases: false
  };

  // Ejecutar validaciones
  results.dataIntegrity = await validateDataIntegrity();
  results.apiFlow = await validateAPIFlow();
  results.specificCases = await validateSpecificCases();

  // Resumen final
  console.log('\nüìä RESUMEN DE VALIDACI√ìN');
  console.log('========================');
  console.log(`Integridad de Datos: ${results.dataIntegrity ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  console.log(`Flujo de API: ${results.apiFlow ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  console.log(`Casos Espec√≠ficos: ${results.specificCases ? '‚úÖ PASS' : '‚ùå FAIL'}`);

  const allPassed = Object.values(results).every(result => result === true);
  
  if (allPassed) {
    console.log('\nüéâ ¬°CORRECCI√ìN VALIDADA EXITOSAMENTE!');
    console.log('‚úÖ El problema "0 doctores disponibles" ha sido resuelto');
    console.log('‚úÖ Ana Rodr√≠guez aparece correctamente en disponibilidad');
    console.log('‚úÖ Flujo manual de reserva de citas funcional');
    process.exit(0);
  } else {
    console.log('\n‚ùå VALIDACI√ìN FALLIDA');
    console.log('‚ö†Ô∏è  Algunos problemas persisten y requieren atenci√≥n');
    process.exit(1);
  }
}

// Ejecutar validaci√≥n
if (require.main === module) {
  main().catch(error => {
    console.error('üí• Error fatal en validaci√≥n:', error);
    process.exit(1);
  });
}

module.exports = {
  validateDataIntegrity,
  validateAPIFlow,
  validateSpecificCases
};
