/**
 * Evolution API OpenAI Bot Service
 * 
 * Manages OpenAI bot integration with Evolution API v2 for natural language
 * appointment booking. Handles bot creation, configuration, session management,
 * and conversation flows for medical appointment scheduling.
 * 
 * @author AgentSalud Development Team
 * @date 2025-01-28
 */

import { EvolutionAPIService } from './EvolutionAPIService';

// =====================================================
// TYPES AND INTERFACES
// =====================================================

export interface OpenAICredentials {
  name: string;
  apiKey: string;
}

export interface OpenAIBotConfig {
  enabled: boolean;
  openaiCredsId: string;
  botType: 'assistant' | 'chatCompletion';
  // For assistants
  assistantId?: string;
  functionUrl?: string;
  // For chat completion
  model?: string;
  systemMessages?: string[];
  assistantMessages?: string[];
  userMessages?: string[];
  maxTokens?: number;
  // Trigger options
  triggerType: 'all' | 'keyword';
  triggerOperator: 'contains' | 'equals' | 'startsWith' | 'endsWith' | 'regex' | 'none';
  triggerValue?: string;
  expire: number;
  keywordFinish: string;
  delayMessage: number;
  unknownMessage: string;
  listeningFromMe: boolean;
  stopBotFromMe: boolean;
  keepOpen: boolean;
  debounceTime: number;
  ignoreJids: string[];
}

export interface BotSessionStatus {
  remoteJid: string;
  status: 'opened' | 'paused' | 'closed';
}

export interface OpenAIDefaultSettings {
  openaiCredsId: string;
  expire: number;
  keywordFinish: string;
  delayMessage: number;
  unknownMessage: string;
  listeningFromMe: boolean;
  stopBotFromMe: boolean;
  keepOpen: boolean;
  debounceTime: number;
  ignoreJids: string[];
  openaiIdFallback?: string;
  speechToText: boolean;
}

// =====================================================
// EVOLUTION OPENAI BOT SERVICE
// =====================================================

/**
 * Evolution OpenAI Bot Service Class
 * 
 * @description Manages OpenAI bot integration with Evolution API v2
 * for natural language appointment booking and conversation management.
 */
export class EvolutionOpenAIBotService {
  private evolutionAPI: EvolutionAPIService;

  constructor() {
    this.evolutionAPI = new EvolutionAPIService();
  }

  // =====================================================
  // CREDENTIALS MANAGEMENT
  // =====================================================

  /**
   * Create OpenAI credentials for an instance
   */
  async createCredentials(instanceName: string, credentials: OpenAICredentials): Promise<any> {
    try {
      console.log(`üîë Creating OpenAI credentials for instance: ${instanceName}`);

      const response = await this.evolutionAPI.makeRequest(
        `/openai/creds/${instanceName}`,
        'POST',
        credentials
      );

      console.log(`‚úÖ OpenAI credentials created successfully for ${instanceName}`);
      return response;

    } catch (error) {
      console.error(`‚ùå Error creating OpenAI credentials for ${instanceName}:`, error);
      throw error;
    }
  }

  /**
   * Get OpenAI credentials for an instance
   */
  async getCredentials(instanceName: string): Promise<any> {
    try {
      const response = await this.evolutionAPI.makeRequest(
        `/openai/creds/${instanceName}`,
        'GET'
      );

      return response;

    } catch (error) {
      console.error(`‚ùå Error getting OpenAI credentials for ${instanceName}:`, error);
      throw error;
    }
  }

  /**
   * Delete OpenAI credentials for an instance
   */
  async deleteCredentials(instanceName: string, credentialsId: string): Promise<any> {
    try {
      console.log(`üóëÔ∏è Deleting OpenAI credentials ${credentialsId} for instance: ${instanceName}`);

      const response = await this.evolutionAPI.makeRequest(
        `/openai/creds/${instanceName}`,
        'DELETE',
        { id: credentialsId }
      );

      console.log(`‚úÖ OpenAI credentials deleted successfully`);
      return response;

    } catch (error) {
      console.error(`‚ùå Error deleting OpenAI credentials:`, error);
      throw error;
    }
  }

  // =====================================================
  // BOT MANAGEMENT
  // =====================================================

  /**
   * Create OpenAI bot for appointment booking
   */
  async createAppointmentBot(instanceName: string, config: Partial<OpenAIBotConfig>): Promise<any> {
    try {
      console.log(`ü§ñ Creating appointment bot for instance: ${instanceName}`);

      // Default configuration for appointment booking
      const defaultConfig: OpenAIBotConfig = {
        enabled: true,
        openaiCredsId: config.openaiCredsId!,
        botType: 'chatCompletion',
        model: 'gpt-4',
        systemMessages: [
          `Eres un asistente virtual especializado en agendar citas m√©dicas para una cl√≠nica de optometr√≠a.

CONTEXTO:
- Trabajas para una cl√≠nica de optometr√≠a especializada en salud visual
- Puedes ayudar con: agendar citas, reagendar, cancelar, consultar disponibilidad
- Servicios disponibles: Examen Visual Completo, Terapia Visual, Adaptaci√≥n de Lentes de Contacto, Control Visual R√°pido
- Doctores disponibles: Dr. Elena L√≥pez (Optometr√≠a Pedi√°trica), Dr. Ana Rodr√≠guez (Optometr√≠a Cl√≠nica), Dr. Pedro S√°nchez (Contactolog√≠a Avanzada)

REGLAS IMPORTANTES:
1. Las citas deben agendarse con al menos 24 horas de anticipaci√≥n
2. Horario de atenci√≥n: Lunes a Viernes 8:00 AM - 6:00 PM, S√°bados 8:00 AM - 2:00 PM
3. Siempre confirma los datos antes de proceder
4. Si no puedes resolver algo, deriva a un humano

FLUJO DE CONVERSACI√ìN:
1. Saluda cordialmente
2. Pregunta qu√© necesita (agendar, reagendar, cancelar, consultar)
3. Para agendar: solicita servicio, fecha preferida, hora preferida, doctor preferido (opcional)
4. Confirma disponibilidad
5. Confirma todos los datos antes de finalizar
6. Proporciona n√∫mero de confirmaci√≥n

Responde siempre en espa√±ol de manera profesional y amigable.`
        ],
        assistantMessages: [
          '¬°Hola! üëã Soy el asistente virtual de la cl√≠nica. Estoy aqu√≠ para ayudarte con tus citas de optometr√≠a. ¬øEn qu√© puedo asistirte hoy?\n\n‚Ä¢ Agendar una nueva cita\n‚Ä¢ Reagendar una cita existente\n‚Ä¢ Cancelar una cita\n‚Ä¢ Consultar disponibilidad'
        ],
        userMessages: [
          'Hola, quiero agendar una cita'
        ],
        maxTokens: 500,
        triggerType: 'all',
        triggerOperator: 'none',
        expire: 30, // 30 minutes
        keywordFinish: '#SALIR',
        delayMessage: 2000,
        unknownMessage: 'Disculpa, no entend√≠ tu mensaje. ¬øPodr√≠as reformularlo? Si necesitas ayuda inmediata, escribe #HUMANO para hablar con nuestro personal.',
        listeningFromMe: false,
        stopBotFromMe: false,
        keepOpen: true,
        debounceTime: 5,
        ignoreJids: [],
        ...config
      };

      const response = await this.evolutionAPI.makeRequest(
        `/openai/create/${instanceName}`,
        'POST',
        defaultConfig
      );

      console.log(`‚úÖ Appointment bot created successfully for ${instanceName}`);
      return response;

    } catch (error) {
      console.error(`‚ùå Error creating appointment bot for ${instanceName}:`, error);
      throw error;
    }
  }

  /**
   * Get all OpenAI bots for an instance
   */
  async getBots(instanceName: string): Promise<any> {
    try {
      const response = await this.evolutionAPI.makeRequest(
        `/openai/find/${instanceName}`,
        'GET'
      );

      return response;

    } catch (error) {
      console.error(`‚ùå Error getting bots for ${instanceName}:`, error);
      throw error;
    }
  }

  /**
   * Get specific OpenAI bot
   */
  async getBot(instanceName: string, botId: string): Promise<any> {
    try {
      const response = await this.evolutionAPI.makeRequest(
        `/openai/fetch/${instanceName}`,
        'GET',
        { id: botId }
      );

      return response;

    } catch (error) {
      console.error(`‚ùå Error getting bot ${botId} for ${instanceName}:`, error);
      throw error;
    }
  }

  /**
   * Update OpenAI bot configuration
   */
  async updateBot(instanceName: string, botId: string, config: Partial<OpenAIBotConfig>): Promise<any> {
    try {
      console.log(`üîÑ Updating bot ${botId} for instance: ${instanceName}`);

      const response = await this.evolutionAPI.makeRequest(
        `/openai/update/${instanceName}`,
        'PUT',
        { id: botId, ...config }
      );

      console.log(`‚úÖ Bot updated successfully`);
      return response;

    } catch (error) {
      console.error(`‚ùå Error updating bot ${botId}:`, error);
      throw error;
    }
  }

  /**
   * Delete OpenAI bot
   */
  async deleteBot(instanceName: string, botId: string): Promise<any> {
    try {
      console.log(`üóëÔ∏è Deleting bot ${botId} for instance: ${instanceName}`);

      const response = await this.evolutionAPI.makeRequest(
        `/openai/delete/${instanceName}`,
        'DELETE',
        { id: botId }
      );

      console.log(`‚úÖ Bot deleted successfully`);
      return response;

    } catch (error) {
      console.error(`‚ùå Error deleting bot ${botId}:`, error);
      throw error;
    }
  }

  // =====================================================
  // SESSION MANAGEMENT
  // =====================================================

  /**
   * Change bot session status for a contact
   */
  async changeSessionStatus(instanceName: string, sessionStatus: BotSessionStatus): Promise<any> {
    try {
      console.log(`üîÑ Changing session status for ${sessionStatus.remoteJid} to ${sessionStatus.status}`);

      const response = await this.evolutionAPI.makeRequest(
        `/openai/changeStatus/${instanceName}`,
        'POST',
        sessionStatus
      );

      console.log(`‚úÖ Session status changed successfully`);
      return response;

    } catch (error) {
      console.error(`‚ùå Error changing session status:`, error);
      throw error;
    }
  }

  // =====================================================
  // DEFAULT SETTINGS
  // =====================================================

  /**
   * Set default OpenAI settings for an instance
   */
  async setDefaultSettings(instanceName: string, settings: Partial<OpenAIDefaultSettings>): Promise<any> {
    try {
      console.log(`‚öôÔ∏è Setting default OpenAI settings for instance: ${instanceName}`);

      const defaultSettings: OpenAIDefaultSettings = {
        expire: 30,
        keywordFinish: '#SALIR',
        delayMessage: 2000,
        unknownMessage: 'Disculpa, no entend√≠ tu mensaje. ¬øPodr√≠as reformularlo?',
        listeningFromMe: false,
        stopBotFromMe: false,
        keepOpen: true,
        debounceTime: 5,
        ignoreJids: [],
        speechToText: true,
        ...settings
      };

      const response = await this.evolutionAPI.makeRequest(
        `/openai/settings/${instanceName}`,
        'POST',
        defaultSettings
      );

      console.log(`‚úÖ Default settings configured successfully`);
      return response;

    } catch (error) {
      console.error(`‚ùå Error setting default settings for ${instanceName}:`, error);
      throw error;
    }
  }

  // =====================================================
  // UTILITY METHODS
  // =====================================================

  /**
   * Enable bot for an instance
   */
  async enableBot(instanceName: string, botId: string): Promise<any> {
    return this.updateBot(instanceName, botId, { enabled: true });
  }

  /**
   * Disable bot for an instance
   */
  async disableBot(instanceName: string, botId: string): Promise<any> {
    return this.updateBot(instanceName, botId, { enabled: false });
  }

  /**
   * Pause bot session for a contact
   */
  async pauseSession(instanceName: string, contactJid: string): Promise<any> {
    return this.changeSessionStatus(instanceName, {
      remoteJid: contactJid,
      status: 'paused'
    });
  }

  /**
   * Resume bot session for a contact
   */
  async resumeSession(instanceName: string, contactJid: string): Promise<any> {
    return this.changeSessionStatus(instanceName, {
      remoteJid: contactJid,
      status: 'opened'
    });
  }

  /**
   * Close bot session for a contact
   */
  async closeSession(instanceName: string, contactJid: string): Promise<any> {
    return this.changeSessionStatus(instanceName, {
      remoteJid: contactJid,
      status: 'closed'
    });
  }
}
